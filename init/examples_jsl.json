{"domains": [{"name":"www.google.com","sites":[],"scripts":[{"uuid":"3617d35b-e034-49c2-b546-1e15fe41354f","code":"/* Groups: Groups are usually managed from page action, however it may be usefull \n    sometimes to add a site to a Group dinamically from scripts, removal must be handled \n    from page action. */\n \nlet example_group = \"Welcome\";\n\nlet ok = (resp) => {\n        \n    console.log(\"Site \" + resp.site + \" added to \" + resp.group);\n}\n\nlet ko = (resp) => {\n        \n    console.error(resp.err)\n}\n\nJSLAddSiteToGroup(\"www.google.com\", \"Not_Existent\")\n    .then(ok, ko);\n    \nJSLAddSiteToGroup(\"www.google.com\", example_group)\n    .then(ok, ko);","name":"groups","disabled":false},{"uuid":"78e4c18f-efdd-43da-8857-7fe2742036fe","code":"/* Downloading: Downloading any link is as easy as that: */\n\n$(document).ready(() => {\n    \n    /* \n    \n        As a second parameter this function will accept a proxy to use for this download: \n        PROXY: {host: \"any.proxy.host\", port: 9050, type: \"SOCKS\"}\n\n    */\n    JSLDownload(\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\")\n        .then(resp => {\n            \n            console.log(\"Download with id: \" + resp.did + \" started.\");    \n            \n        }, resp => {\n            \n            console.error(resp.err);\n        \n        });\n})","name":"download","disabled":false},{"uuid":"7984a37f-d461-4845-8047-a66164780932","code":"/* \n    Focus tab: It may be worthy focusing the tab where our script is running, at the same time \n    we will be notifying the user when it will happen.\n */\n \n $(document).ready(() => { \n     \n     let count = 5;\n     \n     let id = setInterval(() => {\n        \n        JSLNotifyUser(\"INFO\", \"Focusing tab in \" + count + \" seconds.\")\n        \n        if (! --count) {\n            \n            JSLFocusMyTab();\n            clearInterval(id);\n        }\n        \n     }, 1000)\n     \n });","name":"focus_tab_and_notify","disabled":false},{"uuid":"af7d75c1-b37a-4488-a755-791eda937d63","code":"/* Events: It may be worthy to have the ability to event other script of yours: */ \n\n$(document).ready(() => {\n    \n    window.open(\"https://www.ecosia.org\", '_blank');\n    \n    setTimeout(() => {\n        \n        JSLEventNeighbours(\"opening\", window.location.hostname);\n        \n    }, 3000)\n    \n    \n})","name":"events_(emitter)","disabled":false},{"uuid":"bb481a59-12d0-4ad8-90d4-0ac763dd46bd","code":"/* Globals: There are globals available for any script at any time with the following API. */\n \n let value = \"Welcome to JSL\"\n \n JSLGetGlobal(\"JSL\")\n    .then(present => {\n        \n        console.log(\"Global '\" + present.key + \"' have value: '\" + present.value + \"', removing it.\");\n        \n        JSLSetGlobal(\"JSL\", undefined)\n            .then(resp => {\n                \n                console.log(\"Global '\" + resp.key + \"' was \" + (resp.created ? \"created\" : \"removed\"));        \n                \n            }, content => {\n                \n                console.error(content.err);\n                \n            })\n        \n    }, not_present => {\n        \n        console.log(\"Global '\" + not_present.key + \"' does not exists, setting its value.\");\n        \n        JSLSetGlobal(\"JSL\", value)\n            .then(resp => {\n                \n                console.log(\"Global '\" + resp.key + \"' was \" + (resp.created ? \"created\" : \"overwrited\"));        \n                \n            }, content => {\n                \n                console.error(content.err);\n                \n            })\n    \n    })","name":"globals","disabled":false}]},
{"name":"www.ecosia.org","sites":[],"scripts":[{"uuid":"ab4b32e5-70ab-438c-b7a1-28cb7b5ccd06","code":"/* Virtual Resources: You can import any resource you like up tu 1MB of size, once imported you can load\n    or unload them when you wish.*/\n \n let fetchResource = (url) => {\n\n\treturn new Promise(\n\t\t(resolve, reject) => {\n\t\t\t\n\t\t\tfetch(url)\n\t\t\t\t.then(\n\t\t\t\t\tresponse => {\n\n\t\t\t\t\t\tresponse.blob().then(content => {\n                            \n                            $(\"svg.logo\").remove();\n                            \n\t\t\t\t\t\t\tvar reader = new FileReader();\n                            reader.readAsDataURL(content); \n                            reader.onloadend = function() {\n                                \n                                $(\"a.logo\").append('<img src=\"'+ reader.result +'\">');\n\t\t\t\t\t\t\t    resolve();\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}, reject);\n\t\t\t\t\t\t\t\n\t\t\t\t\t}, reject\n\t\t\t\t);\n\t\t}\n\t);\t\n}\n \n \n let loadExistingResource = (path) => {\n     \n     JSLResourceLoad(path)\n        .then(res => {\n            \n            /* \n                When loading a directory \"resp.urls\" will be an array of objects:\n                \n                {name: \"/path/to/virt/res.ext\", url: blob:virt/url/path}\n            \n            */\n            \n            fetchResource(res.urls.url)\n                .then(() => {\n                            \n                    JSLResourceUnload(res.urls.name)\n                        .then(final => {\n                    \n                        console.log(\"Resource \" + final.unloaded + \" unloaded.\");\n                \n                    \n                    })  \n                    \n                })\n            \n        }, res => {\n            \n            console.error(res.err);\n        })\n     \n }\n \n $(document).ready(() => {\n \n    /* If \"force\" evaluates to true, new resource will be imported and properly named. */\n    let force = false;\n    let path = \"/logos/google.png\";\n \n    JSLImportAsResource(\n    \n        \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\",\n        force,\n        path   \n        \n        ).then(resp => {\n                \n            loadExistingResource(resp.resource);\n            \n        }, resp => {\n            \n            if (resp.err.includes('Overwriting')) {\n                \n                loadExistingResource(path)    \n                \n            } else\n                console.error(resp.err);\n        }) \n })","name":"virtual_resources","disabled":false},{"uuid":"b4c4101e-0cb1-4e39-b719-740fd0ae2a8a","code":"/* Event receiver: we save trees. */\n JSLUtils.on(\"opening\", host => {\n     \n     if (host == \"www.google.com\") {\n         \n         JSLFocusMyTab()\n            .then(resp => {\n                \n                alert(\"We save trees!\");\n                \n            });\n     }\n     \n })","name":"events_(receiver)","disabled":false}]}],
"groups": [{"name":"Welcome","sites":["www.google.com"],"disabledAt":[],"scripts":[{"uuid":"323edf9b-a9de-4acc-bd44-24167a0a000e","code":"$(document).ready(() => { alert (\"Welcome group says: Hello!\") });","name":"welcome_alert","disabled":false}]}]}